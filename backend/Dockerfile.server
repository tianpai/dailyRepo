# ========================================================================
# STAGE 1: BUILD STAGE (TypeScript compilation)
# ========================================================================

# Use lightweight Node.js 20 Alpine base image (5x smaller than regular Node)
FROM node:20-alpine AS builder

# Set working directory inside container (creates if not exists)
WORKDIR /usr/src/app

# Copy ONLY package.json, package-lock.json, and tsconfig.json FIRST (optimizes Docker cache)
# This allows reusing dependency layers when only code changes
COPY package*.json ./
COPY tsconfig.json ./

# Install ALL dependencies (including devDependencies for TypeScript build)
# ci: Clean-install from lockfile (faster and more reliable than npm install)
RUN npm ci

# Copy source code
COPY . .

# Build TypeScript to JavaScript
RUN npm run build

# ========================================================================
# STAGE 2: RUNTIME IMAGE (Final production image)
# ========================================================================

# Start fresh with same base image
FROM node:20-alpine

# Set same working directory for consistency
WORKDIR /usr/src/app

# Install ONLY production dependencies
COPY package*.json ./
RUN npm ci --omit=dev

# Copy compiled JavaScript from builder stage
COPY --from=builder /usr/src/app/dist ./dist

# Copy any other necessary files (package.json for runtime)
COPY --from=builder /usr/src/app/package*.json ./

# ====================== SECURITY HARDENING ==============================
# Create non-root user (express-user) and set permissions
RUN adduser -D express-user && \
    chown -R express-user /usr/src/app  # Recursive ownership change

# Switch to non-root user (reduces container breakout risk)
USER express-user

# ====================== RUNTIME CONFIGURATION ===========================
# Set production environment (enables Express optimizations)
ENV NODE_ENV=production

# Set default PORT (override with -e PORT=xxxx at runtime)
ENV PORT=6969

# Expose port to host system (matches Express server port)
EXPOSE 6969

# ====================== HEALTH MONITORING ===============================
# Check container health every 30s (adjust endpoint as needed)
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:{PORT}/health || exit 1  # Replace /health with your endpoint

# ====================== START COMMAND ===================================
# Launch Express server (using node directly - no dev tools)
# Entry point is compiled server.js file in dist directory
CMD ["node", "dist/server.js"]  
